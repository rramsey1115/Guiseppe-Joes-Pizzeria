// <auto-generated />
using System;
using GuiseppeJoes.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GuiseppeJoes.Migrations
{
    [DbContext(typeof(GuiseppeJoesDbContext))]
    partial class GuiseppeJoesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cheese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cheeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Four Cheese"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buffalo Mozzarella"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mozzarella"
                        },
                        new
                        {
                            Id = 5,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("GuiseppeJoes.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "94b44b4a-aad1-42b4-8466-de0d07d1ec5b",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e697748c-ca9e-4a20-b2f9-0440ae818627",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPSLmH80bBzyMkGQU3NS90qdTjSHq9ZPE8gJNacp2ciOCJ8xs41Ezx++PcWPEZFEKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71b632b0-fd1f-4cc0-9dc5-c4675bedc28b",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedOnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Delivery")
                        .HasColumnType("boolean");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlacedOnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TableNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Tip")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletedOnDate = new DateTime(2024, 1, 9, 12, 42, 0, 0, DateTimeKind.Unspecified),
                            Delivery = true,
                            DriverId = 1,
                            EmployeeId = 1,
                            PlacedOnDate = new DateTime(2024, 1, 9, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 0,
                            Tip = 6.00m
                        });
                });

            modelBuilder.Entity("OrderPizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.ToTable("OrderPizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            PizzaId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            PizzaId = 2
                        });
                });

            modelBuilder.Entity("Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CheeseId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("SauceId")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheeseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SauceId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheeseId = 1,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 2,
                            CheeseId = 1,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 3,
                            CheeseId = 3,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CheeseId = 1,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CheeseId = 4,
                            SauceId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CheeseId = 2,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 7,
                            CheeseId = 4,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 8,
                            CheeseId = 1,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 9,
                            CheeseId = 4,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CheeseId = 2,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 11,
                            CheeseId = 1,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 12,
                            CheeseId = 3,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 13,
                            CheeseId = 1,
                            SauceId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 14,
                            CheeseId = 2,
                            SauceId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 15,
                            CheeseId = 3,
                            SauceId = 1,
                            SizeId = 3
                        });
                });

            modelBuilder.Entity("PizzaTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.Property<int>("ToppingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaToppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PizzaId = 1,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 2,
                            PizzaId = 1,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 3,
                            PizzaId = 1,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 4,
                            PizzaId = 2,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 5,
                            PizzaId = 2,
                            ToppingId = 6
                        },
                        new
                        {
                            Id = 6,
                            PizzaId = 3,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 7,
                            PizzaId = 3,
                            ToppingId = 6
                        },
                        new
                        {
                            Id = 8,
                            PizzaId = 3,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 9,
                            PizzaId = 3,
                            ToppingId = 9
                        },
                        new
                        {
                            Id = 10,
                            PizzaId = 3,
                            ToppingId = 11
                        },
                        new
                        {
                            Id = 11,
                            PizzaId = 4,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 12,
                            PizzaId = 4,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 13,
                            PizzaId = 4,
                            ToppingId = 11
                        },
                        new
                        {
                            Id = 14,
                            PizzaId = 6,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 15,
                            PizzaId = 6,
                            ToppingId = 11
                        },
                        new
                        {
                            Id = 16,
                            PizzaId = 7,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 17,
                            PizzaId = 7,
                            ToppingId = 8
                        },
                        new
                        {
                            Id = 18,
                            PizzaId = 7,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 19,
                            PizzaId = 7,
                            ToppingId = 6
                        },
                        new
                        {
                            Id = 20,
                            PizzaId = 8,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 21,
                            PizzaId = 8,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 22,
                            PizzaId = 9,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 23,
                            PizzaId = 9,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 24,
                            PizzaId = 9,
                            ToppingId = 11
                        },
                        new
                        {
                            Id = 25,
                            PizzaId = 11,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 26,
                            PizzaId = 11,
                            ToppingId = 11
                        },
                        new
                        {
                            Id = 27,
                            PizzaId = 11,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 28,
                            PizzaId = 11,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 29,
                            PizzaId = 13,
                            ToppingId = 8
                        },
                        new
                        {
                            Id = 30,
                            PizzaId = 13,
                            ToppingId = 10
                        });
                });

            modelBuilder.Entity("Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Marinara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arrabbiata"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Garlic White"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pesto"
                        },
                        new
                        {
                            Id = 5,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small (10\")",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium (14\")",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Large (18\")",
                            Price = 15.00m
                        });
                });

            modelBuilder.Entity("Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sausage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepperoni"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Meatball"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bacon"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mushroom"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Onion"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Green Pepper"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Black Olive"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Basil"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Extra Cheese"
                        });
                });

            modelBuilder.Entity("GuiseppeJoes.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("GuiseppeJoes.Models.UserProfile", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("GuiseppeJoes.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OrderPizza", b =>
                {
                    b.HasOne("Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("Pizza", b =>
                {
                    b.HasOne("Cheese", "Cheese")
                        .WithMany()
                        .HasForeignKey("CheeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", null)
                        .WithMany("OrderPizzas")
                        .HasForeignKey("OrderId");

                    b.HasOne("Sauce", "Sauce")
                        .WithMany()
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheese");

                    b.Navigation("Sauce");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PizzaTopping", b =>
                {
                    b.HasOne("Pizza", null)
                        .WithMany("PizzaToppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderPizzas");
                });

            modelBuilder.Entity("Pizza", b =>
                {
                    b.Navigation("PizzaToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
